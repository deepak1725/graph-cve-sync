"""Test graph_snyk_cve_sync.py script."""

import responses
from unittest.mock import patch
from datetime import datetime
import os

from graph_snyk_cve_sync import Helper, SnykCveSync
scs = SnykCveSync()
h = Helper()


data = {
    "python": [{
        "creationTime": "2020-03-02T15:49:40.019112Z",
        "credit": [
            "Unknown"
        ],
        "cves": [
            "CVE-2020-1746"
        ],
        "cvssScore": 5.0,
        "cvssV3": "CVSS:3.1/AV:L/AC:L/PR:L/UI:R/S:U/C:H/I:N/A:N",
        "cwes": [
            "CWE-200"
        ],
        "description": "## Overview\n\n[ansible](https://pypi.org/project/ansible/) is a simple IT automation system.\n\n\nAffected versions of this package are vulnerable to Information Disclosure.\nA flaw was found in `ldap_attr` and `ldap_entry` community modules for Ansbile. This issue discloses the LDAP bind password to stdout or a log file if a playbook task is written using the `bind_pw` in the parameters field since nothing in the params field is evaluated for sensitive data.\n\n## Remediation\n\nA fix was pushed into the `master` branch but not yet published.\n\n\n## References\n\n- [GitHub PR](https://github.com/ansible/ansible/pull/67866/files)\n\n- [Redhat Bugzilla](https://bugzilla.redhat.com/show_bug.cgi?id=1805491)\n",
        "disclosureTime": "2020-02-28T00:00:00Z",
        "exploit": "Not Defined",
        "fixable": False,
        "functions_new": [],
        "id": "SNYK-PYTHON-ANSIBLE-559099",
        "initiallyFixedIn": [],
        "language": "python",
        "malicious": False,
        "modificationTime": "2020-03-02T15:54:07.317697Z",
        "package": "ansible",
        "patchExists": False,
        "publicationTime": "2020-03-02T15:54:07.687840Z",
        "references": [
            {
                "title": "GitHub PR",
                "url": "https://github.com/ansible/ansible/pull/67866/files"
            },
            {
                "title": "Redhat Bugzilla",
                "url": "https://bugzilla.redhat.com/show_bug.cgi?id=1805491"
            }
        ],
        "registry": "https://pypi.org",
        "severity": "medium",
        "title": "Information Disclosure",
        "url": "https://snyk.io/vuln/SNYK-PYTHON-ANSIBLE-559099",
        "vulnerableVersions": [
            "[2.5.9 || 1.2]"
        ]
    }],
    "java": [
        {
            "creationTime": "2020-03-02T10:29:31.222015Z",
            "credit": [
                "Unknown"
            ],
            "cves": [
                "CVE-2020-9546",
                "CVE-2020-9547",
                "CVE-2020-9548"
            ],
            "cvssScore": 9.8,
            "cvssV3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H/E:P/RL:O/RC:C",
            "cwes": [
                "CWE-502"
            ],
            "description": "## Overview\n\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\n\n\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data\nMishandles the interaction between serialization gadgets and typing, related to:\r\n\r\n* `com.ibatis.sqlmap.engine.transaction.jta.JtaTransactionConfig` (aka `ibatis-sqlmap`)\r\n* `br.com.anteros.dbcp.AnterosDBCPConfig` (aka `anteros-core`)\r\n* `org.apache.hadoop.shaded.com.zaxxer.hikari.HikariConfig` (aka shaded `hikari-config`)\n\n## Details\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating object from sequence of bytes is called deserialization. Serialization is commonly used for communication (sharing objects between multiple hosts) and persistence (store the object state in a file or a database). It is an integral part of popular protocols like _Remote Method Invocation (RMI)_, _Java Management Extension (JMX)_, _Java Messaging System (JMS)_, _Action Message Format (AMF)_, _Java Server Faces (JSF) ViewState_, etc.\r\n\r\n  \r\n\r\n_Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)), is when the application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, letting the attacker to control the state or the flow of the execution.\r\n\r\n  \r\n\r\nJava deserialization issues have been known for years. However, interest in the issue intensified greatly in 2015, when classes that could be abused to achieve remote code execution were found in a [popular library (Apache Commons Collection)](https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078). These classes were used in zero-days affecting IBM WebSphere, Oracle WebLogic and many other products.\r\n\r\n  \r\n\r\nAn attacker just needs to identify a piece of software that has both a vulnerable class on its path, and performs deserialization on untrusted data. Then all they need to do is send the payload into the deserializer, getting the command executed.\r\n\r\n  \r\n\r\n> Developers put too much trust in Java Object Serialization. Some even de-serialize objects pre-authentication. When deserializing an Object in Java you typically cast it to an expected type, and therefore Java's strict type system will ensure you only get valid object trees. Unfortunately, by the time the type checking happens, platform code has already created and executed significant logic. So, before the final type is checked a lot of code is executed from the readObject() methods of various objects, all of which is out of the developer's control. By combining the readObject() methods of various classes which are available on the classpath of the vulnerable application an attacker can execute functions (including calling Runtime.exec() to execute local OS commands).\r\n\r\n- Apache Blog\r\n\r\n  \r\n\r\nThe vulnerability, also know as _Mad Gadget_\r\n\r\n> Mad Gadget is one of the most pernicious vulnerabilities we\u2019ve seen. By merely existing on the Java classpath, seven \u201cgadget\u201d classes in Apache Commons Collections (versions 3.0, 3.1, 3.2, 3.2.1, and 4.0) make object deserialization for the entire JVM process Turing complete with an exec function. Since many business applications use object deserialization to send messages across the network, it would be like hiring a bank teller who was trained to hand over all the money in the vault if asked to do so politely, and then entrusting that teller with the key. The only thing that would keep a bank safe in such a circumstance is that most people wouldn\u2019t consider asking such a question.\r\n\r\n- Google\n\n## Remediation\n\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.9.10.4 or higher.\n\n\n## References\n\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/9f4e97019fb0dd836533d0b6198c88787e235ae2)\n\n- [Github Issue #1](https://github.com/FasterXML/jackson-databind/issues/2634)\n\n- [GitHub Issue #2](https://github.com/FasterXML/jackson-databind/issues/2631)\n",
            "disclosureTime": "2020-03-02T05:18:36Z",
            "exploit": "Proof of Concept",
            "fixable": True,
            "functions_new": [],
            "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-559094",
            "initiallyFixedIn": [
                "2.9.10.4"
            ],
            "language": "java",
            "malicious": False,
            "modificationTime": "2020-03-02T14:10:33.180786Z",
            "package": "com.fasterxml.jackson.core:jackson-databind",
            "patchExists": False,
            "publicationTime": "2020-03-02T05:18:36Z",
            "references": [
                {
                    "title": "GitHub Commit",
                    "url": "https://github.com/FasterXML/jackson-databind/commit/9f4e97019fb0dd836533d0b6198c88787e235ae2"
                },
                {
                    "title": "Github Issue #1",
                    "url": "https://github.com/FasterXML/jackson-databind/issues/2634"
                },
                {
                    "title": "GitHub Issue #2",
                    "url": "https://github.com/FasterXML/jackson-databind/issues/2631"
                }
            ],
            "severity": "critical",
            "title": "Deserialization of Untrusted Data",
            "url": "https://snyk.io/vuln/SNYK-JAVA-COMFASTERXMLJACKSONCORE-559094",
            "vulnerableVersions": [
                "[,2.9.10.4)"
            ]
        }
    ],
    "js": [
        {
            "creationTime": "2020-03-02T11:17:35.161853Z",
            "credit": [
                "Oscar Arnflo"
            ],
            "cves": [],
            "cvssScore": 6.3,
            "cvssV3": "CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:C/C:H/I:N/A:N/E:P/RL:U/RC:C",
            "cwes": [
                "CWE-29"
            ],
            "description": "## Overview\n\n[decompress-tar](https://github.com/kevva/decompress-tar) is a tar plugin for decompress.\n\n\nAffected versions of this package are vulnerable to Arbitrary File Write via Archive Extraction (Zip Slip).\nIt is possible to bypass the security measures provided by decompress  and conduct ZIP path traversal through symlinks.\r\n\r\n### PoC\r\n\r\n```\r\nconst decompress = require('decompress');\r\n\r\ndecompress('slip.tar.gz', 'dist').then(files => {\r\n\tconsole.log('done!');\r\n});\r\n```\n\n## Remediation\n\nThere is no fixed version for `decompress-tar`.\n\n\n## References\n\n- [GitHub Issue](https://github.com/kevva/decompress/issues/71)\n\n- [GitHub PR decompress-tar](https://github.com/kevva/decompress-tar/pull/12)\n\n- [NPM Advisory](https://www.npmjs.com/advisories/1217)\n",
            "disclosureTime": "2019-10-15T20:29:24Z",
            "exploit": "Proof of Concept",
            "fixable": False,
            "functions_new": [],
            "id": "SNYK-JS-DECOMPRESSTAR-559095",
            "initiallyFixedIn": [],
            "language": "js",
            "malicious": False,
            "modificationTime": "2020-03-02T14:09:31.522355Z",
            "package": "decompress-tar",
            "patchExists": False,
            "publicationTime": "2020-02-27T13:28:41Z",
            "references": [
                {
                    "title": "GitHub Issue",
                    "url": "https://github.com/kevva/decompress/issues/71"
                },
                {
                    "title": "GitHub PR decompress-tar",
                    "url": "https://github.com/kevva/decompress-tar/pull/12"
                },
                {
                    "title": "NPM Advisory",
                    "url": "https://www.npmjs.com/advisories/1217"
                }
            ],
            "severity": "medium",
            "title": "Arbitrary File Write via Archive Extraction (Zip Slip)",
            "url": "https://snyk.io/vuln/SNYK-JS-DECOMPRESSTAR-559095",
            "vulnerableVersions": [
                "2.0.2 || 4.1.0"
            ]
        }
    ]
}


def test_extract_data_from_feed():
    """Test extract_data_from_feed."""
    scs.extract_data_from_feed(data)
    results = scs.CVE_DATA
    assert "pypi" in results
    assert "npm" in results
    assert "maven" in results

    assert "ansible" in results['pypi']
    assert "decompress-tar" in results['npm']
    assert "com.fasterxml.jackson.core:jackson-databind" in results['maven']

    py_pkg = results['pypi']['ansible'][0]
    npm_pkg = results['npm']['decompress-tar'][0]
    mv_pkg = results['maven']['com.fasterxml.jackson.core:jackson-databind'][0]

    assert py_pkg['pvtVuln'] is False
    assert len(py_pkg['affected']) == 2

    assert npm_pkg['pvtVuln'] is True
    assert len(npm_pkg['affected']) == 2
    assert len(npm_pkg['cves']) == 0

    assert mv_pkg['pvtVuln'] is False
    assert '2.3.0' in mv_pkg['affected']


@responses.activate
@patch('graph_snyk_cve_sync.Helper.is_dry_run')
def test_insert_cves(mocker):
    """Test insert_cves."""
    mocker.return_value = True
    scs.CVE_DATA = {
        "maven": {
            "abc": [
                {
                    "a": "b"
                }

            ]
        },
        "pypi": {
            "xyz": [
                {
                    "a": "b"
                }

            ]
        },
        "npm": {
            "pqr": [
                {
                    "a": "b"
                }

            ]
        }
    }
    val = scs.insert_cves()
    assert val is True


@responses.activate
@patch('graph_snyk_cve_sync.SnykCveSync.disable_snyk_run')
@patch('graph_snyk_cve_sync.Helper.read_data_from_s3')
@patch('graph_snyk_cve_sync.SnykCveSync.extract_data_from_feed')
@patch('graph_snyk_cve_sync.SnykCveSync.insert_cves')
def test_run_snyk_sync(m1, m2, m3, m4):
    """Test run_snyk_sync."""
    m4.return_value = False
    m3.return_value = {
        "a": "b"
    }
    m2.return_value = ""
    m1.return_value = ""

    val = scs.run_snyk_sync()
    assert val == "Success"

    m4.return_value = True
    val = scs.run_snyk_sync()
    assert val is None


def test_disable_snyk_run():
    """Test disable_snyk_run."""
    val = scs.disable_snyk_run(datetime(2020, 2, 27, 6, 1))
    assert val is False

    val = scs.disable_snyk_run(datetime(2020, 2, 27, 12, 1))
    assert val is True


@patch('graph_snyk_cve_sync.Helper.force_run_ingestion')
def test_disable_snyk_run1(m1):
    """Test disable_snyk_run1."""
    m1.return_value = True
    val = scs.disable_snyk_run(datetime(2020, 2, 27, 12, 1))
    assert val is False


@patch.dict(os.environ, {'DRY_RUN': 'true'})
def test_is_dry_run():
    """Test is_dry_run."""
    val = h.is_dry_run()
    assert val is True


@patch.dict(os.environ, {'DRY_RUN': '0'})
def test_is_dry_run1():
    """Test is_dry_run."""
    val = h.is_dry_run()
    assert val is False


@patch.dict(os.environ, {'SNYK_INGESTION_FORCE_RUN': 'true'})
def test_force_run_ingestion():
    """Test force_run_ingestion."""
    val = h.force_run_ingestion()
    assert val is True


@patch.dict(os.environ, {'SNYK_INGESTION_FORCE_RUN': '0'})
def test_force_run_ingestion1():
    """Test force_run_ingestion."""
    val = h.force_run_ingestion()
    assert val is False
