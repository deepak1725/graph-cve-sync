"""Test snyk_feed.py script."""

import pytest
from unittest.mock import patch
from datetime import datetime

from snyk_feed import SnykDataFetcher
sdf = SnykDataFetcher()


class S3Obj:
    """S3 Obj class for testing."""
    text = "{\"a\": \"b\"}"


def test_disable_snyk_run():
    """Test disable_snyk_run."""
    val = sdf.disable_snyk_run(datetime(2020, 4, 4, 6, 1))
    assert val is False

    val = sdf.disable_snyk_run(datetime(2020, 2, 27, 8, 1))
    assert val is True


@patch('snyk_feed.Helper.force_run_ingestion')
def test_disable_snyk_run1(m1):
    """Test disable_snyk_run1."""
    m1.return_value = True
    val = sdf.disable_snyk_run(datetime(2020, 2, 27, 12, 1))
    assert val is False


def test_validate():
    """Test validate."""
    pytest.raises(ValueError, sdf.validate)

    sdf.TOKEN = "a"
    sdf.URL = "b"
    sdf.ISS = "c"
    val = sdf.validate()
    assert val is True


@patch('snyk_feed.SnykCveSync.run_snyk_sync')
@patch('snyk_feed.requests.get')
@patch('snyk_feed.SnykDataFetcher.store_data')
def test_fetch(m1, m2, m3):
    """Test fetch."""
    m1.return_value = True
    m2.return_value = S3Obj()
    m3.return_value = "Success"
    val = sdf.fetch()
    assert val is True


@patch('snyk_feed.SnykDataFetcher.validate')
@patch('snyk_feed.SnykDataFetcher.store_data')
@patch('snyk_feed.SnykDataFetcher.disable_snyk_run')
@patch('snyk_feed.SnykDataFetcher.fetch')
def test_run_snyk_fetch(m1, m2, m3, m4):
    """Test run_snyk_fetch."""
    m4.return_value = True
    m2.return_value = True
    res = sdf.run_snyk_fetch()
    assert res is None

    m1.return_value = True
    m2.return_value = False
    m3.return_value = True
    res = sdf.run_snyk_fetch()
    assert res == "Success"
