#!/usr/bin/env python3
# Copyright Â© 2020 Red Hat Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# Author: Yusuf Zainee <yzainee@redhat.com>
#

"""Script which fetches the feed from snyk and stores it in S3 bucket."""

import os
import jwt
import time
import requests
import logging
from datetime import datetime
from graph_snyk_cve_sync import Helper

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


class SnykDataFetcher:
    """Snyk data class to fetch the information from Snyk."""

    def __init__(self):
        """Init function to add default values."""
        self.helper = Helper()
        self.URL = os.environ.get('SNYK_URL', '')
        self.ISS = os.environ.get('SNYK_ISS', '')
        self.TOKEN = os.environ.get('SNYK_TOKEN', '')

    def validate(self):
        """Validate method to see all the params are set.
        :return True if all params are valid. Raise exception otherwise & halt proceedings."""
        try:
            assert self.URL
            assert self.ISS
            assert self.TOKEN
        except AssertionError:
            raise ValueError('Snyk Feed fetch aborted. Either URL, ISS or TOKEN missing')
        logger.info("Snyk credentials validated.")
        return True

    def fetch(self):
        """Fetch function to fetch the feed from Snyk.
        :return True if the operation to fetch & store is successful. Exception otherwise."""
        payload = {
            'iss': self.ISS,
            'iat': int(time.time())
        }
        jwt_token = jwt.encode(
            payload,
            self.TOKEN,
            algorithm='HS256'
        )
        headers = {
            'Authorization': jwt_token
        }
        try:
            res = requests.get(self.URL, headers=headers)
        except Exception as e:
            logger.error('Unable to get snyk feed. Reason: %r' % e)
        logger.info("Snyk feed successfully fetched. Storing in S3.")
        self.store_data(res.text)
        return True

    def store_data(self, data):
        """Store the snyk data into the respective S3 bucket."""
        utc_now = datetime.utcnow()
        self.helper.store_json_content(data, "snyk-feed/" + utc_now.strftime('%d-%m-%y') + ".json")

    def disable_snyk_run(self, date):
        """Enable or disable snyk run.
        :return True if this needs to be run forcefully or if its saturday midnight.
        False otherwise."""
        force = self.helper.force_run_ingestion()
        if force:
            return False
        days = os.environ.get("SNYK_FEED_FETCH_DAYS", '5')
        return date.strftime('%H') != '00' \
            or date.weekday() in days.split(", ")

    def run_snyk_fetch(self):
        """Entry function for the snyk fetch feed.
        :return Success message for completion of task."""
        logger.info("Snyk Feed Fetch Function".center(50, '-'))
        self.validate()
        utc_now = datetime.utcnow()
        # Run once every Saturday. This will be changed to delta ingestion later.
        if self.disable_snyk_run(utc_now):
            logger.info("Snyk feed wont be fetched today. To be fetched every Saturday")
            return
        self.fetch()
        logger.info("Snyk Feed Fetch Completed".center(50, '-'))
        return "Success"
